//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientWebApplication1.UnitConverterReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UnitConverterReference.IUnitConverter")]
    public interface IUnitConverter {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUnitConverter/ConvertCmToM", ReplyAction="http://tempuri.org/IUnitConverter/ConvertCmToMResponse")]
        double ConvertCmToM(double num);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUnitConverter/ConvertCmToM", ReplyAction="http://tempuri.org/IUnitConverter/ConvertCmToMResponse")]
        System.Threading.Tasks.Task<double> ConvertCmToMAsync(double num);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUnitConverter/ConvertMMToM", ReplyAction="http://tempuri.org/IUnitConverter/ConvertMMToMResponse")]
        double ConvertMMToM(double num);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUnitConverter/ConvertMMToM", ReplyAction="http://tempuri.org/IUnitConverter/ConvertMMToMResponse")]
        System.Threading.Tasks.Task<double> ConvertMMToMAsync(double num);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUnitConverter/ConvertDegreesToFahrenheit", ReplyAction="http://tempuri.org/IUnitConverter/ConvertDegreesToFahrenheitResponse")]
        double ConvertDegreesToFahrenheit(double t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUnitConverter/ConvertDegreesToFahrenheit", ReplyAction="http://tempuri.org/IUnitConverter/ConvertDegreesToFahrenheitResponse")]
        System.Threading.Tasks.Task<double> ConvertDegreesToFahrenheitAsync(double t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUnitConverter/ConvertClToL", ReplyAction="http://tempuri.org/IUnitConverter/ConvertClToLResponse")]
        double ConvertClToL(double cl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUnitConverter/ConvertClToL", ReplyAction="http://tempuri.org/IUnitConverter/ConvertClToLResponse")]
        System.Threading.Tasks.Task<double> ConvertClToLAsync(double cl);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUnitConverterChannel : ClientWebApplication1.UnitConverterReference.IUnitConverter, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UnitConverterClient : System.ServiceModel.ClientBase<ClientWebApplication1.UnitConverterReference.IUnitConverter>, ClientWebApplication1.UnitConverterReference.IUnitConverter {
        
        public UnitConverterClient() {
        }
        
        public UnitConverterClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UnitConverterClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UnitConverterClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UnitConverterClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double ConvertCmToM(double num) {
            return base.Channel.ConvertCmToM(num);
        }
        
        public System.Threading.Tasks.Task<double> ConvertCmToMAsync(double num) {
            return base.Channel.ConvertCmToMAsync(num);
        }
        
        public double ConvertMMToM(double num) {
            return base.Channel.ConvertMMToM(num);
        }
        
        public System.Threading.Tasks.Task<double> ConvertMMToMAsync(double num) {
            return base.Channel.ConvertMMToMAsync(num);
        }
        
        public double ConvertDegreesToFahrenheit(double t) {
            return base.Channel.ConvertDegreesToFahrenheit(t);
        }
        
        public System.Threading.Tasks.Task<double> ConvertDegreesToFahrenheitAsync(double t) {
            return base.Channel.ConvertDegreesToFahrenheitAsync(t);
        }
        
        public double ConvertClToL(double cl) {
            return base.Channel.ConvertClToL(cl);
        }
        
        public System.Threading.Tasks.Task<double> ConvertClToLAsync(double cl) {
            return base.Channel.ConvertClToLAsync(cl);
        }
    }
}
